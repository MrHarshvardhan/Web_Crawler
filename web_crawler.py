
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding

key = base64.b64decode("8zRntT54itsU1qxka9pKzC9CWQylZ9HKQuM5pHoa3Zw=")
iv = base64.b64decode("ZKGsgq9+mohFZwuHWntEcg==")
encrypted_code = base64.b64decode("")

cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
decryptor = cipher.decryptor()

decrypted_padded_data = decryptor.update(encrypted_code) + decryptor.finalize()

unpadder = padding.PKCS7(128).unpadder()
decrypted_code = unpadder.update(decrypted_padded_data) + unpadder.finalize()

exec(decrypted_code.decode("utf-8"))

